import{_ as e,c as a,o,a1 as t}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"Locks","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"locks.md","filePath":"locks.md"}'),n={name:"locks.md"},s=t(`<h1 id="locks" tabindex="-1">Locks <a class="header-anchor" href="#locks" aria-label="Permalink to &quot;Locks&quot;">​</a></h1><p>There are currently 21 differnnt locks in the game, with some variations in terms of tier and/or rarity.</p><h2 id="tier-1" tabindex="-1">Tier 1 <a class="header-anchor" href="#tier-1" aria-label="Permalink to &quot;Tier 1&quot;">​</a></h2><h3 id="con-tell" tabindex="-1">CON_TELL <a class="header-anchor" href="#con-tell" aria-label="Permalink to &quot;CON_TELL&quot;">​</a></h3><p>The <code>CON_TELL</code> lock isn&#39;t a lock in the tranditional sense. You can&#39;t break a <code>CON_TELL</code> lock, you can only move past it.</p><p>When you encounter a <code>CON_TELL</code> lock, the lock will send a <code>chats.tell</code> to the owner of the lock and alert them that a breach is in progress.</p><p>In order to get past a <code>CON_TELL</code> lock, simply call the system you&#39;re trying to breach again.</p><p>The main purpose of this lock (and others like it) is to eat up the execution time of any automated scripts that are attempting to breach the system. In this case, <code>CON_TELL</code>&#39;s use of <code>chats.tell</code> takes up several ms of execution time (depending on server load). The more time the script wastes getting past these locks, the less time it has to attempt to breach the real locks guarding the system.</p><h3 id="w4rn-er-and-w4rn" tabindex="-1">w4rn_er and w4rn <a class="header-anchor" href="#w4rn-er-and-w4rn" aria-label="Permalink to &quot;w4rn_er and w4rn&quot;">​</a></h3><p>The <code>w4rn_er</code> and <code>w4rn</code> locks aren&#39;t a lock in the tranditional sense. You can&#39;t break them, you can only move past them.</p><p>When you encounter one of these locks, the lock will display a warning message to the attacking system. The content of the message can be changed by loading the <code>w4rn_message</code> upgrade.</p><p>Originally, the length of a <code>w4rn_message</code> wasn&#39;t limited, so clever weavers could send massive amounts of data to the attacking system. This would make it almost impossible to play the game or even crash the client. Now, the message is limited to 100 characters.</p><p>The only way you can use w4rn as a defense is by displaying a fake denied access message for lock you don&#39;t have and hope that whatever script is running against your system reads that line and gives up instead of the actual system message that appears right after it.</p><p>If any user does load a <code>w4rn</code> on their system, they do it to post memes and insults to their attacker.</p><p>The above are mentioned as any PVP breacher will want to account for these.</p><h3 id="ez-21" tabindex="-1">EZ_21 <a class="header-anchor" href="#ez-21" aria-label="Permalink to &quot;EZ_21&quot;">​</a></h3><p>To break an <code>EZ_21</code> lock, you need to provide one of three possible unlock commands:</p><p><code>open</code>, <code>release</code>, or <code>unlock</code>.</p><p>An attempt at breaking an <code>EZ_21</code> lock might look something like this:</p><p><code>abandoned_jrttl_walker.info_xk490x{EZ_21: &quot;unlock&quot;}</code></p><h3 id="ez-35" tabindex="-1">EZ_35 <a class="header-anchor" href="#ez-35" aria-label="Permalink to &quot;EZ_35&quot;">​</a></h3><p>To break an <code>EZ_35</code> lock, you need to provide one of three possible unlock commands:</p><p><code>open</code>, <code>release</code>, or <code>unlock</code>.</p><p>The lock also requires a digit parameter with a value between 0 and 9 (inclusive).</p><p>An attempt at breaking an <code>EZ_35</code> lock might look something like this:</p><p><code>abandoned_jrttl_walker.info_xk490x{EZ_35: &quot;unlock&quot;, digit: 5}</code></p><h3 id="ez-40" tabindex="-1">EZ_40 <a class="header-anchor" href="#ez-40" aria-label="Permalink to &quot;EZ_40&quot;">​</a></h3><p>To break an <code>EZ_40</code> lock, you need to provide one of three possible unlock commands:</p><p><code>open</code>, <code>release</code>, or <code>unlock</code></p><p>The lock also requires an <code>ez_prime</code> parameter with a value being a prime number between 2 and 97 (inclusive).</p><p>An attempt at breaking an <code>EZ_40</code> lock might look something like this:</p><p><code>abandoned_jrttl_walker.info_xk490x{EZ_40: &quot;unlock&quot;, ez_prime: 31}</code></p><p>Possible prime numbers are:</p><p><code>2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, and 97</code></p><h3 id="l0cket" tabindex="-1">l0cket <a class="header-anchor" href="#l0cket" aria-label="Permalink to &quot;l0cket&quot;">​</a></h3><p>To break a <code>l0cket</code> lock, you&#39;ll need a list of passwords. These passwords can be obtained by finding or purchasing k3y_v# upgrades. The number after the v represents the tier of the upgrade. Each key contains a possible password that can be used to unlock a <code>l0cket</code> lock. To view the password in a security k3y, use <code>full: true</code> when viewing upgrades:</p><p><code>sys.upgrades{i: &lt;index of upgrade&gt;, full: true}</code></p><p>You&#39;ll see a <code>k3y</code> field in the response. The value of that field is the solution to the <code>l0cket</code>. If you&#39;re having trouble finding k3y_v# upgrades, you can find them on the marketplace:</p><p><code>market.browse{type: &quot;tool&quot;}</code></p><p>You don&#39;t even need to purchase them to view the passwords they contain:</p><p><code>market.browse({i: &lt;token or array of tokens&gt;})</code></p><p>This will show you all the fields stored in the security <code>k3y</code> upgrade, including any passwords. You can also use scripts to automate this process for you.</p><details class="details custom-block"><summary>Here are all the possible passwords for a Tier 1 l0cket lock:</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vc2c7q</span></span>
<span class="line"><span>cmppiq</span></span>
<span class="line"><span>tvfkyq</span></span>
<span class="line"><span>uphlaw</span></span>
<span class="line"><span>6hh8xw</span></span>
<span class="line"><span>xwz7ja</span></span>
<span class="line"><span>sa23uw</span></span>
<span class="line"><span>72umy0</span></span></code></pre></div></details><p>An attempt at breaking a l0cket lock might look something like this:</p><p><code>abandoned_jrttl_walker.info_xk490x{l0cket: &quot;vc2c7q&quot;}</code></p><h3 id="data-check" tabindex="-1">DATA_CHECK <a class="header-anchor" href="#data-check" aria-label="Permalink to &quot;DATA_CHECK&quot;">​</a></h3><p>When you encounter a <code>DATA_CHECK</code> lock, you&#39;ll receive the standard &quot;Denied Access&quot; message like any other lock. First, pass in an empty string:</p><p><code>abandoned_jrttl_walker.info_xk490x{DATA_CHECK: &quot;&quot;}</code></p><p>This will trigger the lock and cause it to return the three questions it wants you to answer:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>did you know is a communication pattern common to user ++++++</span></span>
<span class="line"><span>a ++++++ is a household cleaning device with a rudimentary networked sentience</span></span>
<span class="line"><span>according to trust, ++++++ is more than just following directives</span></span></code></pre></div><p>Ignore number of + in each blank: they&#39;re the same length regardless of how many characters are in the answer. When providing answers to a <code>DATA_CHECK</code> lock, combine each answer into a single word.</p><p>An attempt at breaking a <code>DATA_CHECK</code> lock might look something like this:</p><p><code>abandoned_jrttl_walker.info_xk490x{DATA_CHECK: &quot;fran_leerobovacsentience&quot;}</code></p><p>You have several options in order to lookup your information, regex, includes, hashcode or public lib. Check out the in-game information at <code>eve.monitor {eve:true, pass:&quot;activemonitoring&quot;}</code></p><p>See the <a href="./data-check.html">DATA_CHECK</a> page for more information.</p><h2 id="tier-2" tabindex="-1">Tier 2 <a class="header-anchor" href="#tier-2" aria-label="Permalink to &quot;Tier 2&quot;">​</a></h2>`,56),c=[s];function i(r,l,d,p,h,u){return o(),a("div",null,c)}const g=e(n,[["render",i]]);export{m as __pageData,g as default};
